// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
const TELEGRAM_BOT_TOKEN = '7855695564:AAFTFpccBmiG3DXacfa6GjZZ_l_HbWxWsK4'
const TELEGRAM_CHAT_ID = '307734235'

interface TelegramMessage {
  chat_id: string
  text: string
  parse_mode?: 'HTML' | 'Markdown'
}

export const sendTelegramMessage = async (message: string): Promise<boolean> => {
  try {
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`

    const payload: TelegramMessage = {
      chat_id: TELEGRAM_CHAT_ID,
      text: message,
      parse_mode: 'HTML',
    }

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    })

    if (!response.ok) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', response.status, response.statusText)
      return false
    }

    const result = await response.json()
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:', result)
    return true
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error)
    return false
  }
}

export const sendCodeNamesLayout = async (
  words: string[],
  colors: string[],
  cardId: number,
  width: number = 3,
  height: number = 3,
): Promise<boolean> => {
  console.log('=== TELEGRAM SEND ===')
  console.log('width:', width, 'height:', height)
  console.log('words:', words)
  console.log('colors:', colors)
  console.log('=====================')
  try {
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π Code Names
    let message = `üéØ <b>Code Names - –ö–∞—Ä—Ç–æ—á–∫–∞ ${cardId}</b>\n`
    message += `üìê <b>–†–∞–∑–º–µ—Ä –ø–æ–ª—è: ${width}x${height}</b>\n\n`
    message += `üìã <b>–ü–æ—Ä—è–¥–æ–∫ —Ü–≤–µ—Ç–æ–≤ (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ, —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑):</b>\n`

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    for (let row = 0; row < height; row++) {
      let rowText = ''
      for (let col = 0; col < width; col++) {
        const index = row * width + col
        const word = words[index] || '?'
        const color = colors[index] || '?'

        // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤
        const colorEmoji =
          color === 'red'
            ? 'üî¥'
            : color === 'blue'
              ? 'üîµ'
              : color === 'black'
                ? '‚ö´'
                : color === 'white'
                  ? '‚ö™'
                  : '‚ùì'
        rowText += `${colorEmoji} ${word}  `
      }
      message += `${rowText.trim()}\n`
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
    const colorCounts = colors.reduce(
      (acc, color) => {
        acc[color] = (acc[color] || 0) + 1
        return acc
      },
      {} as Record<string, number>,
    )

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ —ç–º–æ–¥–∑–∏
    message += `\nüó∫Ô∏è <b>–í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞:</b>\n`
    for (let row = 0; row < height; row++) {
      let rowText = ''
      for (let col = 0; col < width; col++) {
        const index = row * width + col
        const color = colors[index] || '?'

        // –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
        const mapEmoji =
          color === 'red'
            ? 'üî¥'
            : color === 'blue'
              ? 'üîµ'
              : color === 'black'
                ? '‚ö´'
                : color === 'white'
                  ? '‚ö™'
                  : '‚ùì'
        rowText += `${mapEmoji} `
      }
      message += `${rowText.trim()}\n`
    }

    message += `\nüìù <b>–õ–µ–≥–µ–Ω–¥–∞:</b>\n`
    if (colorCounts.red) message += `üî¥ –ö—Ä–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (${colorCounts.red} –∫–∞—Ä—Ç–æ—á–µ–∫)\n`
    if (colorCounts.blue) message += `üîµ –°–∏–Ω—è—è –∫–æ–º–∞–Ω–¥–∞ (${colorCounts.blue} –∫–∞—Ä—Ç–æ—á–µ–∫)\n`
    if (colorCounts.black)
      message += `‚ö´ –ß–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ (${colorCounts.black} –∫–∞—Ä—Ç–æ—á–∫–∞ - –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–∞—è)\n`
    if (colorCounts.white) message += `‚ö™ –ë–µ–ª–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ (${colorCounts.white} –∫–∞—Ä—Ç–æ—á–∫–∞ - –Ω–∏—á—å—è)\n`

    return await sendTelegramMessage(message)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Code Names:', error)
    return false
  }
}
